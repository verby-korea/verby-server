buildscript {
	ext {
		springBootVersion = '2.7.1'
		queryDslVersion = '5.0.0'
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}

	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
		classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10"
	}

}

allprojects {
	group = 'com.verby'
	version = '0.0.1-SNAPSHOT'
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'jacoco'
	apply plugin: "com.ewerk.gradle.plugins.querydsl"

	sourceCompatibility = '17'

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
		querydsl.extendsFrom compileClasspath
	}

	repositories {
		mavenCentral()
	}

	def querydslDir = "$buildDir/generated/querydsl"

	querydsl {
		library = "com.querydsl:querydsl-apt"
		jpa = true
		querydslSourcesDir = querydslDir
	}

	sourceSets {
		main.java.srcDir querydslDir
	}

	compileQuerydsl{
		options.annotationProcessorPath = configurations.querydsl
	}

	dependencies {
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		testCompileOnly 'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'

		testImplementation 'org.springframework.boot:spring-boot-starter-test'

		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-data-redis'

		implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
		implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
	}

	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}

	jacocoTestReport {
		dependsOn test
		reports {
			html.enabled true
			csv.enabled false
			xml.enabled false
		}
		finalizedBy 'jacocoTestCoverageVerification'
	}

	jacocoTestCoverageVerification {
		def Qdomains = []

		for (qPattern in '*.QA'..'*.QZ') {
			Qdomains.add(qPattern + '*')
		}

		violationRules {
			rule {
				enabled = true
				element = 'CLASS'

				limit {
					counter = 'BRANCH'
					value = 'COVEREDRATIO'
					// minimum = 0.98
				}

				excludes = [] + Qdomains
			}
		}
	}

}
